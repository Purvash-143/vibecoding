name: Insurance App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: insurance-app
  EKS_CLUSTER_NAME: eks-nvai-devops
  KUBERNETES_NAMESPACE: insurance-application
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}

jobs:
  # Stage 1: GitLeaks Security Scan
  gitleaks:
    name: 🔍 GitLeaks - Secret Detection
    runs-on: ubuntu-latest
    continue-on-error: true  # Warn but don't fail
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Upload GitLeaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: results.sarif
          retention-days: 5

  # Stage 2: Linting - ESLint and Prettier (Sequential - runs after GitLeaks)
  linting:
    name: 🧹 Code Linting & Syntax Check
    runs-on: ubuntu-latest
    needs: gitleaks  # Wait for GitLeaks to complete
    continue-on-error: true  # Warn but don't fail
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Check package files
        run: |
          echo "Checking package files in main directory..."
          echo "Current directory: $(pwd)"
          echo "Listing all files:"
          ls -la
          echo "Looking for package files specifically:"
          find . -name "package*.json" -o -name "package-lock.json" | head -5

      - name: Install dependencies
        run: |
          echo "Checking for package files..."
          if [ -f package-lock.json ] && [ -f package.json ]; then
            echo "Found both package.json and package-lock.json - using npm ci"
            npm ci --prefer-offline --no-audit
          elif [ -f package.json ]; then
            echo "Found package.json but no package-lock.json - using npm install"
            npm install --prefer-offline --no-audit
          else
            echo "ERROR: No package.json found!"
            exit 1
          fi

      - name: Run ESLint
        env:
          # Provide dummy values for any environment variables needed during linting
          AWS_REGION: us-east-1
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_SECRET: dummy-secret
        run: |
          echo "Running ESLint on src directory..."
          npx eslint src --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-results.json || true
          npx eslint src --ext .js,.jsx,.ts,.tsx || true
        continue-on-error: true

      - name: Run Prettier Check
        run: |
          echo "Running Prettier check..."
          npx prettier --check . || true
        continue-on-error: true

      - name: Upload Linting Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linting-results
          path: eslint-results.json
          retention-days: 5

  # Stage 3: CodeQL Analysis (Sequential - runs after Linting)
  codeql:
    name: � CodeQL Security Analysis
    runs-on: ubuntu-latest
    needs: linting  # Wait for Linting to complete
    continue-on-error: true  # Warn but don't fail
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup Node.js for CodeQL
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules for CodeQL
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-codeql-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            echo "Using npm ci with existing package-lock.json"
            npm ci --prefer-offline --no-audit
          else
            echo "No package-lock.json found, using npm install"
            npm install --prefer-offline --no-audit
          fi

      - name: Build for CodeQL
        env:
          # Provide dummy values for build-time environment variables
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
          AWS_S3_BUCKET: dummy
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_SECRET: dummy-secret-for-build
          NEXTAUTH_URL: http://localhost:3000
        run: npm run build:docker

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Stage 4: Build Application (Sequential - runs after CodeQL)
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: codeql  # Wait for CodeQL to complete
    if: always()  # Run even if previous jobs failed (since they're warnings)
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules for Build
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-build-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            echo "Using npm ci with existing package-lock.json"
            npm ci --prefer-offline --no-audit
          else
            echo "No package-lock.json found, using npm install"
            npm install --prefer-offline --no-audit
          fi

      - name: Run tests
        run: |
          npm test -- --coverage --watchAll=false || true
        continue-on-error: true

      - name: Build application
        env:
          # Provide dummy values for build-time environment variables
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
          AWS_S3_BUCKET: dummy
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_SECRET: dummy-secret-for-build
          NEXTAUTH_URL: http://localhost:3000
        run: npm run build:docker

      - name: Debug AWS Credentials
        run: |
          echo "Checking AWS credential variables..."
          echo "AWS_ACCESS_KEY_ID length: ${#AWS_ACCESS_KEY_ID}"
          echo "AWS_SECRET_ACCESS_KEY length: ${#AWS_SECRET_ACCESS_KEY}"
          if [ -n "$AWS_SESSION_TOKEN" ]; then
            echo "AWS_SESSION_TOKEN length: ${#AWS_SESSION_TOKEN}"
          else
            echo "AWS_SESSION_TOKEN: not set"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/insurance-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create single image tag
        id: image-tag
        run: |
          # Create a single image tag for deployment (shorter format)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
          IMAGE_TAG="${{ steps.login-ecr.outputs.registry }}/insurance-app:${SHORT_SHA}"
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Image tag for deployment: ${IMAGE_TAG}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/arm64
          tags: ${{ steps.image-tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Stage 5: Deploy to EKS Cluster (Sequential - runs after Build)
  deploy:
    name: 🚀 Deploy to EKS
    runs-on: ubuntu-latest
    needs: [build]  # Wait for build to complete
    if: always() && needs.build.result == 'success'  # Only deploy if build succeeded
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update kube config
        run: |
          aws eks update-kubeconfig --name eks-nvai-devops --region ap-south-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Create namespace if not exists
        run: |
          kubectl create namespace insurance-application --dry-run=client -o yaml | kubectl apply -f -

      - name: Create/Update ECR Secret
        run: |
          kubectl create secret docker-registry ecr-secret \
            --docker-server=${{ steps.login-ecr.outputs.registry }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ap-south-1) \
            -n insurance-application \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update deployment image
        run: |
          echo "Image tag from build: ${{ needs.build.outputs.image-tag }}"
          
          # Update the deployment with new image
          kubectl set image deployment/insurance-app insurance-app=${{ needs.build.outputs.image-tag }} -n insurance-application || \
          kubectl set image deployment/insurance-app-deployment insurance-app=${{ needs.build.outputs.image-tag }} -n insurance-application

      - name: Deploy to Kubernetes
        run: |
          # Apply all Kubernetes manifests
          if [ -f k8s/06-app-deployment.yaml ]; then
            kubectl apply -f k8s/06-app-deployment.yaml
          fi
          if [ -f k8s/07-app-service.yaml ]; then
            kubectl apply -f k8s/07-app-service.yaml
          fi
          if [ -f k8s/app-service-nodeport.yaml ]; then
            kubectl apply -f k8s/app-service-nodeport.yaml
          fi

      - name: Force deployment restart
        run: |
          echo "Forcing deployment restart with new image..."
          
          # Delete existing pods to force recreation with new image
          kubectl delete pods -n insurance-application -l app=insurance-app --ignore-not-found=true
          
          # Wait for pods to be recreated
          sleep 10

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment rollout (max 5 minutes)..."
          if kubectl get deployment insurance-app-deployment -n insurance-application &>/dev/null; then
            kubectl rollout status deployment/insurance-app-deployment -n insurance-application --timeout=300s
          elif kubectl get deployment insurance-app -n insurance-application &>/dev/null; then
            kubectl rollout status deployment/insurance-app -n insurance-application --timeout=300s
          fi

      - name: Get service URL
        run: |
          echo "Getting service information..."
          kubectl get services -n insurance-application
          echo "Getting pod status..."
          kubectl get pods -n insurance-application

      - name: Get deployment URL
        id: get-url
        run: |
          EXTERNAL_IP=$(kubectl get svc insurance-app-service -n insurance-application -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          if [ -n "$EXTERNAL_IP" ]; then
            echo "url=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT
            echo "### 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "Application URL: http://$EXTERNAL_IP" >> $GITHUB_STEP_SUMMARY
          else
            echo "No LoadBalancer found, checking NodePort..."
            NODEPORT=$(kubectl get svc -n insurance-application -o jsonpath='{.items[?(@.spec.type=="NodePort")].spec.ports[0].nodePort}' 2>/dev/null || echo "")
            if [ -n "$NODEPORT" ]; then
              echo "NodePort service available on port: $NODEPORT" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Health Check
        run: |
          sleep 30  # Wait for service to be ready
          EXTERNAL_IP=$(kubectl get svc insurance-app-service -n insurance-application -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          if [ -n "$EXTERNAL_IP" ]; then
            echo "LoadBalancer external IP: $EXTERNAL_IP"
            curl -f http://$EXTERNAL_IP/api/health || echo "Health check failed, but deployment completed"
          else
            echo "No external IP available yet, checking service status:"
            kubectl get svc -n insurance-application
          fi

      - name: Deployment Summary
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster**: eks-nvai-devops" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: insurance-application" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ap-south-1" >> $GITHUB_STEP_SUMMARY

  # Post-deployment notifications
  notify:
    name: 📢 Post-Deployment Notifications
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
          fi