name: Insurance App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: insurance-app
  EKS_CLUSTER_NAME: eks-nvai-devops
  KUBERNETES_NAMESPACE: insurance-application

jobs:
  build-and-deploy:
    name: ðŸš€ Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create image tag
        id: image-tag
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
          IMAGE_TAG="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${SHORT_SHA}"
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Image tag: ${IMAGE_TAG}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/arm64
          tags: ${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update Kubernetes deployment
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
          
          # Update the deployment with new image
          kubectl set image deployment/insurance-app insurance-app=${{ steps.image-tag.outputs.tag }} -n ${{ env.KUBERNETES_NAMESPACE }}
          
          # Wait for rollout to complete
          kubectl rollout status deployment/insurance-app -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=600s
          
          # Get deployment status
          kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }} -l app=insurance-app